// Generated by CIRCT firtool-1.30.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module TLArbiter(
  input         sink_ready,	// tilelink/src/xbar/TLArbiter.scala:61:16
                sources_0_valid,	// tilelink/src/xbar/TLArbiter.scala:62:58
  input  [2:0]  sources_0_bits_opcode,	// tilelink/src/xbar/TLArbiter.scala:62:58
                sources_0_bits_param,	// tilelink/src/xbar/TLArbiter.scala:62:58
  input  [3:0]  sources_0_bits_size,	// tilelink/src/xbar/TLArbiter.scala:62:58
  input  [1:0]  sources_0_bits_source,	// tilelink/src/xbar/TLArbiter.scala:62:58
  input  [31:0] sources_0_bits_address,	// tilelink/src/xbar/TLArbiter.scala:62:58
  input  [7:0]  sources_0_bits_mask,	// tilelink/src/xbar/TLArbiter.scala:62:58
  input  [63:0] sources_0_bits_data,	// tilelink/src/xbar/TLArbiter.scala:62:58
  input         sources_0_bits_corrupt,	// tilelink/src/xbar/TLArbiter.scala:62:58
  output        sink_valid,	// tilelink/src/xbar/TLArbiter.scala:61:16
  output [2:0]  sink_bits_opcode,	// tilelink/src/xbar/TLArbiter.scala:61:16
                sink_bits_param,	// tilelink/src/xbar/TLArbiter.scala:61:16
  output [3:0]  sink_bits_size,	// tilelink/src/xbar/TLArbiter.scala:61:16
  output [1:0]  sink_bits_source,	// tilelink/src/xbar/TLArbiter.scala:61:16
  output [31:0] sink_bits_address,	// tilelink/src/xbar/TLArbiter.scala:61:16
  output [7:0]  sink_bits_mask,	// tilelink/src/xbar/TLArbiter.scala:61:16
  output [63:0] sink_bits_data,	// tilelink/src/xbar/TLArbiter.scala:61:16
  output        sink_bits_corrupt,	// tilelink/src/xbar/TLArbiter.scala:61:16
                sources_0_ready	// tilelink/src/xbar/TLArbiter.scala:62:58
);

  assign sink_valid = sources_0_valid;
  assign sink_bits_opcode = sources_0_bits_opcode;
  assign sink_bits_param = sources_0_bits_param;
  assign sink_bits_size = sources_0_bits_size;
  assign sink_bits_source = sources_0_bits_source;
  assign sink_bits_address = sources_0_bits_address;
  assign sink_bits_mask = sources_0_bits_mask;
  assign sink_bits_data = sources_0_bits_data;
  assign sink_bits_corrupt = sources_0_bits_corrupt;
  assign sources_0_ready = sink_ready;
endmodule

